/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 02:18:05 GMT 2021
 */

package intelement;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import intelement.Sort;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Sort_ESTest extends Sort_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sort sort0 = new Sort();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<Integer>) 0;
      comparableArray0[1] = (Comparable<Integer>) 0;
      comparableArray0[2] = (Comparable<Integer>) 0;
      Sort.heapsort(comparableArray0);
      intArray0[1] = 80;
      intArray0[2] = 0;
      Comparable<Integer>[] comparableArray1 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 3);
      comparableArray1[0] = (Comparable<Integer>) 0;
      comparableArray1[1] = (Comparable<Integer>) 0;
      comparableArray1[2] = (Comparable<Integer>) 80;
      Sort.heapsort(comparableArray1);
      Sort.heapsort(comparableArray1);
      Sort.heapsort(comparableArray1);
      Sort.heapsort(comparableArray1);
      sort0.mergeSort(intArray0);
      sort0.mergeSort(intArray0);
      Sort.heapsort(comparableArray1);
      Sort.heapsort(comparableArray1);
      sort0.mergeSort(intArray0);
      sort0.insertionSort(intArray0);
      sort0.mergeSort(intArray0);
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 80;
      intArray1[5] = 0;
      Sort.quicksort(intArray1);
      int[] intArray2 = new int[7];
      intArray2[0] = 0;
      intArray2[1] = 80;
      intArray2[2] = 80;
      intArray2[3] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      // Undeclared exception!
      try { 
        Sort.swap(intArray2, (-644), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -644
         //
         verifyException("intelement.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2480;
      intArray0[1] = 0;
      intArray0[2] = 169;
      intArray0[3] = (-589);
      Sort.swap(intArray0, 0, 0);
      Sort sort0 = new Sort();
      sort0.insertionSort(intArray0);
      sort0.mergeSort(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 4564;
      intArray0[2] = 4564;
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<Object>) comparableArray0;
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[0];
      Sort.quicksort(intArray0);
      Sort sort0 = new Sort();
      int[] intArray1 = new int[4];
      intArray1[0] = 1247;
      intArray1[1] = (-346);
      intArray1[2] = 0;
      intArray1[3] = (-2300);
      sort0.shellsort(intArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectArray0;
      // Undeclared exception!
      try { 
        Sort.swapReferences(objectArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("intelement.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sort sort0 = new Sort();
      int[] intArray0 = new int[5];
      intArray0[0] = 1858;
      intArray0[1] = 0;
      intArray0[2] = 1000;
      intArray0[3] = 1;
      intArray0[4] = (-755);
      sort0.mergeSort(intArray0);
      sort0.insertionSort(intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        Sort.heapsort(comparableArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("intelement.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) objectArray0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = objectArray0[1];
      objectArray0[3] = objectArray0[2];
      objectArray0[4] = objectArray0[3];
      objectArray0[5] = objectArray0[4];
      objectArray0[6] = objectArray0[5];
      objectArray0[7] = objectArray0[6];
      objectArray0[8] = objectArray0[7];
      // Undeclared exception!
      try { 
        Sort.swapReferences(objectArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("intelement.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        Sort.quicksort((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("intelement.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sort sort0 = new Sort();
      Comparable<String>[] comparableArray0 = null;
      // Undeclared exception!
      try { 
        Sort.heapsort((Comparable[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("intelement.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sort sort0 = new Sort();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-631);
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = (-45);
      sort0.mergeSort(intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) objectArray0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = objectArray0[1];
      objectArray0[3] = objectArray0[2];
      Sort.swapReferences(objectArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sort.swap((int[]) null, (-2240), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("intelement.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1156;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 882;
      intArray0[4] = 142;
      intArray0[5] = 0;
      intArray0[6] = 1490;
      intArray0[7] = (-1);
      // Undeclared exception!
      try { 
        Sort.swap(intArray0, 1647, 142);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1647
         //
         verifyException("intelement.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sort sort0 = new Sort();
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        Sort.heapsort(comparableArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("intelement.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sort sort0 = new Sort();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      sort0.shellsort(intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sort sort0 = new Sort();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-579);
      intArray0[2] = (-1);
      sort0.shellsort(intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-593);
      intArray0[1] = (-1444);
      Sort.quicksort(intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 10;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 10;
      Sort.quicksort(intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2063);
      intArray0[1] = 1101;
      intArray0[2] = 0;
      intArray0[3] = 4259;
      intArray0[4] = 1205;
      Sort.quicksort(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Sort sort0 = new Sort();
      int[] intArray0 = new int[3];
      intArray0[0] = 466;
      intArray0[1] = 0;
      intArray0[2] = 0;
      sort0.insertionSort(intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Sort.quicksort(intArray0);
      Sort sort0 = new Sort();
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<Integer>) 0;
      comparableArray0[1] = (Comparable<Integer>) 0;
      Sort.heapsort(comparableArray0);
      sort0.insertionSort(intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Sort sort0 = new Sort();
      int[] intArray0 = new int[5];
      intArray0[0] = (-4042);
      intArray0[1] = (-1989);
      intArray0[2] = 0;
      intArray0[3] = 957;
      intArray0[4] = (-1);
      sort0.insertionSort(intArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1989);
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) sort0;
      objectArray0[3] = (Object) (-1);
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<Integer>) (-4042);
      comparableArray0[1] = (Comparable<Integer>) (-1);
      comparableArray0[2] = (Comparable<Integer>) (-4042);
      comparableArray0[3] = (Comparable<Integer>) 0;
      comparableArray0[4] = (Comparable<Integer>) 0;
      Sort.heapsort(comparableArray0);
      // Undeclared exception!
      try { 
        Sort.swapReferences(objectArray0, 1206, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1206
         //
         verifyException("intelement.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Sort sort0 = new Sort();
      int[] intArray0 = new int[0];
      sort0.mergeSort(intArray0);
      sort0.shellsort(intArray0);
      sort0.insertionSort(intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Sort sort0 = new Sort();
      // Undeclared exception!
      try { 
        sort0.insertionSort((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("intelement.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Sort sort0 = new Sort();
      int[] intArray0 = new int[9];
      intArray0[0] = 1510;
      intArray0[1] = 0;
      intArray0[2] = 435;
      intArray0[3] = 0;
      intArray0[4] = 0;
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<Integer>) 0;
      comparableArray0[1] = (Comparable<Integer>) 1510;
      comparableArray0[2] = (Comparable<Integer>) 435;
      Sort.heapsort(comparableArray0);
      intArray0[5] = (-1099);
      intArray0[6] = 1888;
      intArray0[7] = 3681;
      intArray0[8] = 0;
      sort0.shellsort(intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectArray0;
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = objectArray0[1];
      objectArray0[3] = objectArray0[2];
      objectArray0[4] = objectArray0[3];
      objectArray0[5] = objectArray0[4];
      objectArray0[6] = objectArray0[5];
      Sort.swapReferences(objectArray0, 0, 0);
      Sort sort0 = new Sort();
      // Undeclared exception!
      try { 
        sort0.shellsort((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("intelement.Sort", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[18];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-590);
      intArray0[4] = 1277;
      intArray0[5] = 2611;
      intArray0[6] = 1;
      intArray0[7] = 1;
      Sort.quicksort(intArray0);
  }
}
