/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 18:17:56 GMT 2021
 */

package intkey;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import intkey.Range;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = range0.setUpper(0);
      // Undeclared exception!
      try { 
        range1.setUpper(1944);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = range0.setUpper(33);
      Range range2 = range1.setLower(33);
      assertNotSame(range1, range2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = range0.setLower(33);
      // Undeclared exception!
      try { 
        range1.setLower(33);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = range0.setLower(2188);
      boolean boolean0 = range1.inRange(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = range0.setLower((-1));
      Range range2 = range1.setUpper(24);
      boolean boolean0 = range2.inRange(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = range0.setUpper(3346);
      boolean boolean0 = range1.inRange(3346);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = range0.setUpper(3346);
      Range range2 = range1.setUpper(2455);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = range0.setUpper(0);
      // Undeclared exception!
      try { 
        range1.setUpper(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = range0.setLower(0);
      Range range2 = range1.setLower(2645);
      assertNotSame(range0, range2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = range0.setLower(3346);
      // Undeclared exception!
      try { 
        range1.setLower(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = range0.setLower(0);
      boolean boolean0 = range1.inRange(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range();
      Range range1 = range0.setLower((-1));
      Range range2 = range1.setUpper((-1));
      boolean boolean0 = range2.inRange(1);
      assertFalse(boolean0);
  }
}
